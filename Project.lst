Microsoft (R) Macro Assembler Version 14.12.25834.0	    03/17/18 14:38:23
-Programming Assignment 6    (ProjectSixA.asm		     Page 1 - 1


				TITLE Programming Assignment 6    (ProjectSixA.asm)

				; Author: Aalok Borkar
				; Email: borkaraa@oregonstate.edu
				; Course / Project ID   CS271-400 (Assignment 6A)              Date: 3/18/18
				; Description: Write a program that defines the macros getString and displayString (using getstring function) and gets 10 unsigned user-inputted integers and both displays and finds their sums and average.


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;-----------------------------------M A C R O S--------------------------------------------------------------------------------------------------------------------------------------------------

 = 00000064			LEN = 100	;Constant for defining the lenth of input array
 = 00000050			QLEN = 80	;Constant to define LEN minus the max amount of bytes allowed by the program (4)

				GetString MACRO	prompt, buffer	;-------------------------------------------------
					pushad
					;prompt the user
					mov edx, prompt
					call CRLF
					call WriteString

					;get string input from user
					mov edx, buffer	;eax has mem @ of the start of reserved space input_string
					mov ecx, LEN
					call ReadString		;input_ptr =aka- num_input now has the user-inputted data
					popad

				ENDm


				DisplayString MACRO str_add	;-------------------------------------------------
					pushad
						mov edx, str_add	;will be an offset of a string
						call WriteString
					popad
				ENDm

				;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 00000000			.data
 00000000 50 72 6F 67 72	hello1		BYTE	"Programming Assignment 6: Designing low-level I/O procedures", 13, 10, 0				;Variable to introduce the user (1/6)
	   61 6D 6D 69 6E
	   67 20 41 73 73
	   69 67 6E 6D 65
	   6E 74 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   0D 0A 00
 0000003F 57 72 69 74 74	hello2		BYTE	"Written by: Aalok Borkar", 13, 10, 0													;Variable to introduce the user (2/6)
	   65 6E 20 62 79
	   3A 20 41 61 6C
	   6F 6B 20 42 6F
	   72 6B 61 72 0D
	   0A 00
 0000005A 50 6C 65 61 73	hello3		BYTE	"Please provide 10 unsigned decimal integers.", 13, 10, 0								;Variable to introduce the user (3/6)
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 75 6E
	   73 69 67 6E 65
	   64 20 64 65 63
	   69 6D 61 6C 20
	   69 6E 74 65 67
	   65 72 73 2E 0D
	   0A 00
 00000089 45 61 63 68 20	hello4		BYTE	"Each number needs to be small enough to fit inside a 32 bit register.", 13, 10, 0		;Variable to introduce the user (4/6)
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 0D
	   0A 00
 000000D1 41 66 74 65 72	hello5		BYTE	"After you have finished inputting the raw numbers I will display a list", 13, 10, 0	;Variable to introduce the user (5/6)
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   61 20 6C 69 73
	   74 0D 0A 00
 0000011B 6F 66 20 74 68	hello6		BYTE	"of the integers, their sum, and their average value.", 13, 10, 0						;Variable to introduce the user (6/6)
	   65 20 69 6E 74
	   65 67 65 72 73
	   2C 20 74 68 65
	   69 72 20 73 75
	   6D 2C 20 61 6E
	   64 20 74 68 65
	   69 72 20 61 76
	   65 72 61 67 65
	   20 76 61 6C 75
	   65 2E 0D 0A 00
 00000152  00000064 [		num_input	BYTE	LEN DUP(0)																				;Variable to store the user input (single number)
	    00
	   ]
 000001B6 00000152 R		input_ptr	DWORD	num_input																				;Variable to point to input
 000001BA 45 6E 74 65 72	prompt		BYTE	"Enter an unsigned integer: ",0															;Variable to prompt user to input a variable
	   20 61 6E 20 75
	   6E 73 69 67 6E
	   65 64 20 69 6E
	   74 65 67 65 72
	   3A 20 00
 000001D6 54 68 65 20 76	error		BYTE	"The value you entered is either not valid or too large",0								;Variable to inform user of error in input
	   61 6C 75 65 20
	   79 6F 75 20 65
	   6E 74 65 72 65
	   64 20 69 73 20
	   65 69 74 68 65
	   72 20 6E 6F 74
	   20 76 61 6C 69
	   64 20 6F 72 20
	   74 6F 6F 20 6C
	   61 72 67 65 00
 0000020D 2C 20 00		comma		BYTE	", ",0																					;Variable to display a comma and space
 00000210 000001BA R		prompt_ptr	DWORD	prompt																					;Variable to point to prompt
 00000214  00000064 [		numeric		BYTE	LEN DUP(0)																				;Variable to hold the newly translated array of integers
	    00
	   ]
 00000278 00000000		fail		DWORD	0																						;Variale to set if ReadVal fails
 0000027C  0000000A [		array		DWORD	10	DUP(0)																				;Variable to store the 10 user inputted integers
	    00000000
	   ]
 000002A4 59 6F 75 20 69	displArray	BYTE	"You inputted: ",0																		;Variable to tell user what they inputted
	   6E 70 75 74 74
	   65 64 3A 20 00
 000002B3 00000000		counter		DWORD	0																						;Variable to track indexing
 000002B7			translate	QWORD	0																						;Variable to hold translated (string -> integer) value during translation proccess
	   0000000000000000
 000002BF 00000000		lit			DWORD	0																						;Variable to hold literal value {str[i]-48}
 000002C3 00000000		index		DWORD	0																						;Variable to track index of 'array'
 000002C7 00000000		sum			DWORD	0																						;Variable to keep track of the sum of all elements in the array
 000002CB 00000000		avg			DWORD	0																						;Variable to keep track of the avg of all elements in the array
 000002CF 54 68 65 20 73	sum_text	BYTE	"The sum of the values you inputted is: ",0												;Variable to present the user the sum value
	   75 6D 20 6F 66
	   20 74 68 65 20
	   76 61 6C 75 65
	   73 20 79 6F 75
	   20 69 6E 70 75
	   74 74 65 64 20
	   69 73 3A 20 00
 000002F7 54 68 65 20 61	avg_text	BYTE	"The average of the values you inputted is: ",0											;Variable to present the user the average value
	   76 65 72 61 67
	   65 20 6F 66 20
	   74 68 65 20 76
	   61 6C 75 65 73
	   20 79 6F 75 20
	   69 6E 70 75 74
	   74 65 64 20 69
	   73 3A 20 00
 00000323  0000000C [		temp_str	BYTE	12 DUP(0)																				;Variable to store temporary translated string (one single DWORD integer) during 'Backtrack'
	    00
	   ]
 0000032F 00000000		count		DWORD	0																						;Variable to keep track of number of BYTES in translated number (in temp_str)
 00000333  00000001 [		temp_byte	BYTE	1 DUP(0)																				;Varaible to temporarily store ascii version of a digit for printing
	    00
	   ]
 00000334 59 6F 75 20 65	ur_string	BYTE	"You entered: ",0																		;Variable to tell the user what 10 integers they entered
	   6E 74 65 72 65
	   64 3A 20 00
 00000342 54 68 61 6E 6B	byebye		BYTE	"Thanks for playing!", 13, 10, 0														;Variable to say farewell to the user
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 0D
	   0A 00


				;----------------------------------- C O D E ----------------------------------------------------------------------------------------------------------------------------------------------

 00000000			.code

 00000000			main PROC
				;Introduce User
 00000000  68 0000011B R		push OFFSET hello6
 00000005  68 000000D1 R		push OFFSET hello5
 0000000A  68 00000089 R		push OFFSET hello4
 0000000F  68 0000005A R		push OFFSET hello3
 00000014  68 0000003F R		push OFFSET hello2
 00000019  68 00000000 R		push OFFSET hello1
 0000001E  E8 00000084			call Introduction

				;Get User Inputs
 00000023  68 000002C3 R		push OFFSET index
 00000028  68 000002BF R		push OFFSET lit
 0000002D  68 000002B3 R		push OFFSET counter
 00000032  68 0000027C R		push OFFSET array
 00000037  68 00000278 R		push OFFSET fail
 0000003C  68 000001D6 R		push OFFSET error
 00000041  68 000002B7 R		push OFFSET translate
 00000046  68 00000152 R		push OFFSET num_input
 0000004B  68 000001BA R		push OFFSET prompt
 00000050  E8 000001AB			call Get_Input

				;Display Inputs
 00000055  68 00000334 R		push OFFSET ur_string
 0000005A  68 00000333 R		push OFFSET	temp_byte
 0000005F  68 0000032F R		push OFFSET count
 00000064  68 00000323 R		push OFFSET temp_str
 00000069  68 000002A4 R		push OFFSET displArray
 0000006E  68 0000020D R		push OFFSET comma
 00000073  68 0000027C R		push OFFSET array
 00000078  E8 00000232			call Displayer

				;Display Average (including the sum)
 0000007D  68 000002F7 R		push OFFSET avg_text
 00000082  68 000002CF R		push OFFSET sum_text
 00000087  68 0000027C R		push OFFSET array
 0000008C  68 000002C7 R		push OFFSET sum
 00000091  E8 00000273			call DisplayAvg

				;Display Farewell
 00000096  68 00000342 R		push OFFSET byebye
 0000009B  E8 0000029E			call Farewell

				exit	; exit to operating system
 000000A0  6A 00	   *	    push   +000000000h
 000000A2  E8 00000000 E   *	    call   ExitProcess

 000000A7			main ENDP

				;-----------------------------------F U N C T I O N------D E F I N T I O N S----------------------------------------------------------------------------------------------

				;Procedure to introduce user to the program ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				;receives: @hello1,	@hello1, @hello3, @hello4, @hello5, @hello6
				;returns: none
				;preconditions: none (however, variables must have been pushed to the stack accordingly)
				;registers changed: edx
 000000A7				Introduction PROC
 000000A7  55					push ebp
 000000A8  8B EC				mov ebp, esp
 000000AA  60					pushad

						DisplayString [ebp+8]
 000000AB  60		     1		pushad
 000000AC  8B 55 08	     1			mov edx, [ebp+8]	;will be an offset of a string
 000000AF  E8 00000000 E     1			call WriteString
 000000B4  61		     1		popad
						DisplayString [ebp+12]
 000000B5  60		     1		pushad
 000000B6  8B 55 0C	     1			mov edx, [ebp+12]	;will be an offset of a string
 000000B9  E8 00000000 E     1			call WriteString
 000000BE  61		     1		popad
 000000BF  E8 00000000 E			call CRLF
						DisplayString [ebp+16]
 000000C4  60		     1		pushad
 000000C5  8B 55 10	     1			mov edx, [ebp+16]	;will be an offset of a string
 000000C8  E8 00000000 E     1			call WriteString
 000000CD  61		     1		popad
						DisplayString [ebp+20]
 000000CE  60		     1		pushad
 000000CF  8B 55 14	     1			mov edx, [ebp+20]	;will be an offset of a string
 000000D2  E8 00000000 E     1			call WriteString
 000000D7  61		     1		popad
						DisplayString [ebp+24]
 000000D8  60		     1		pushad
 000000D9  8B 55 18	     1			mov edx, [ebp+24]	;will be an offset of a string
 000000DC  E8 00000000 E     1			call WriteString
 000000E1  61		     1		popad
						DisplayString [ebp+28]
 000000E2  60		     1		pushad
 000000E3  8B 55 1C	     1			mov edx, [ebp+28]	;will be an offset of a string
 000000E6  E8 00000000 E     1			call WriteString
 000000EB  61		     1		popad
						
 000000EC  61					popad
 000000ED  5D					pop ebp
 000000EE  C2 0018				ret 24
 000000F1				Introduction ENDP


				;Procedure to read user input ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				;receives:	@fail, @error, @numeric, @num_input, @prompt, @translate, @array counter, @lit, @index
				;returns: none
				;preconditions: user inputted value must be a valid integer
				;registers changed: eax, ebx, ecx, edx, esi, edi (all restored after)
 000000F1				ReadVal PROC
 000000F1  60					pushad
 000000F2					Ask:
 000000F2  8B 5D 10					mov ebx, [ebp+16]	;reset the numeric translated value
 000000F5  B8 00000000					mov eax, 0
 000000FA  89 03					mov [ebx], eax

 000000FC  8B 5D 24					mov ebx, [ebp+36]	;reset the literal value
 000000FF  B8 00000000					mov eax, 0
 00000104  89 03					mov [ebx], eax

 00000106  8B 75 0C					mov esi, [ebp+12] ;Reset input string (ZERO OUT)
 00000109  B9 00000064					mov ecx, 100
 0000010E  B0 00					mov al, 0
 00000110						clear_input:
 00000110  88 06						mov BYTE PTR [esi], al
 00000112  83 C6 01						add esi, 1
 00000115  E2 F9						loop clear_input

 00000117  8B 75 10					mov esi, [ebp+16] ;Reset output string (ZERO OUT)
 0000011A  B9 00000064					mov ecx, 100
 0000011F  B0 00					mov al, 0
 00000121						clear_output:
 00000121  8B 45 10						mov eax, [ebp+16] ;translate
 00000124  C7 00 00000000					mov DWORD PTR [eax], 0			
							
							GetString [ebp+8], [ebp+12]
 0000012A  60		     1		pushad
 0000012B  8B 55 08	     1		mov edx, [ebp+8]
 0000012E  E8 00000000 E     1		call CRLF
 00000133  E8 00000000 E     1		call WriteString
 00000138  8B 55 0C	     1		mov edx, [ebp+12]	;eax has mem @ of the start of reserved space input_string
 0000013B  B9 00000064	     1		mov ecx, LEN
 00000140  E8 00000000 E     1		call ReadString		;input_ptr =aka- num_input now has the user-inputted data
 00000145  61		     1		popad


 00000146						Check_zero:
 00000146  33 F6						xor esi, esi
 00000148  8B 75 0C						mov esi, [ebp+12]
 0000014B  80 3E 30						cmp BYTE PTR [esi], 48		;check if the value inputted is 0 (48 in ASCII)
 0000014E  74 02						je Bypass
 00000150  EB 0B						jmp Not_Zero
 00000152							Bypass:
 00000152  8B 5D 10							mov ebx, [ebp+16]
 00000155  C7 03 00000000						mov DWORD PTR [ebx], 0		;If value entered is just 0, then bypass the rest of function and just translate it to 0
 0000015B  EB 7E							jmp Ender

 0000015D						Not_Zero:

							;Validate user input
 0000015D  8B 75 0C					mov esi, [ebp+12]	;set up our 'in-string'
 00000160  8B 7D 10					mov edi, [ebp+16]	;set our 'out-value' for the integer translated version of the user input
 00000163  B9 00000050					mov ecx, QLEN ;80
 00000168  83 C6 13					add esi, 19			;start it at 19 bytes in (max space for 64bit number allowed), the rest of the bytes (20-100) should all be 00000000
 0000016B  33 C0					xor eax, eax

 0000016D						Validate_length:			;Check to see if the input fits in 64 bits for the variable translate [ebp+16]
 0000016D  8A 06						mov al, [esi]	;move current bytes worth of data (starting from @) into AL
 0000016F  3C 00						cmp al, 0
 00000171  7F 07						jg INVALID		;11th to 100th BYTE should all be 00000000
 00000173  83 C6 01						add esi, 1		;increment by 1 BYTE
 00000176  E2 F5						loop Validate_length
																			;now we know this value can fit in QWORD
 00000178  EB 13					jmp next_one	;The value is good size-wise

 0000017A						INVALID:
 0000017A  8B 55 14						mov edx, [ebp+20]	;value is invalid
 0000017D  E8 00000000 E					call WriteString
 00000182  C7 06 00000000					mov DWORD PTR [esi], 0		;reset our input string
 00000188  E9 FFFFFF65						jmp Ask

 0000018D						next_one:	;now check if negative or not (is the first byte = 45)
 0000018D  8B 75 0C						mov esi, [ebp+12]
 00000190  33 C0						xor eax, eax
 00000192  8A 06						mov al, [esi]
 00000194  3C 2D						cmp al, 45
 00000196  74 E2						je INVALID

 00000198					After:				;We now know our input is 64 bits or less & positive: we dont yet know if its 32 bits (or less) OR consisting of all numbers
 00000198  8B 75 0C				mov esi, [ebp+12]	;set up our 'in-string' again
 0000019B  33 D2				xor edx, edx
 0000019D  FC					cld
 0000019E					morph:
 0000019E  33 C0					xor eax, eax
 000001A0  AC						lodsb		;mov al, BYTE PTR [esi] move just one byte of data - auto increments by 1 BYTE?
 000001A1  3C 00					cmp al, 0	;if its JE (equal) to 00000000 then exit the loop (matters only after the first BYTE)
 000001A3  74 2C					je Size_check
 000001A5  3C 30					cmp al, 48
 000001A7  7C D1					jl INVALID		;even if a single digit is out of the zone -> redo input (INVALID)
 000001A9  3C 39					cmp al, 57
 000001AB  7F CD					jg INVALID		;breaks this loop
											;We now know this digit is all good to go on all counts ---> translate	

 000001AD  2C 30					sub al, 48	;Literal value (Z)
 000001AF  8B 5D 24					mov ebx, [ebp+36]	
 000001B2  88 03					mov [ebx], al			;save literal to stack
 000001B4  8B 5D 10					mov ebx, [ebp+16]
 000001B7  8B 03					mov eax, [ebx]
 000001B9  BB 0000000A					mov ebx, 10				
 000001BE  F7 E3					mul ebx
 000001C0  8B 5D 24					mov ebx, [ebp+36]
 000001C3  03 03					add eax, [ebx]			;updated translate value
 000001C5  83 F8 00					cmp eax, 0				;if eax resets due to overflow...user input is invalid
 000001C8  74 B0					je INVALID
 000001CA  8B 5D 10					mov ebx, [ebp+16]	
 000001CD  89 03					mov [ebx], eax			;save translated value (push the new updated translate value to the stack)
 000001CF  EB CD					jmp morph
						;Check to see if the value can fit into 32 bits:
 000001D1					Size_check:
							;xor edx, edx
							;mov eax, [ebp+16]
							;mov ebx, 4294967295
							;cmp [eax], ebx

 000001D1  83 FA 00					cmp edx, 0				;If edx has a value then that means that the number -
 000001D4  75 A4					jne INVALID				;was too large for eax and was extended to edx
 000001D6  83 F8 00					cmp eax, 0
 000001D9  75 9F					jne INVALID

 000001DB					Ender:
 000001DB  61					popad
 000001DC  C3					ret
 000001DD				ReadVal ENDP


				;Procedure to store user input into array ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				;receives:	@fail, @error, @numeric, @num_input, @prompt, @translate, @array counter, @lit, @index
				;returns: none
				;preconditions: user inputted value must be a valid integer, the value must be on the stack at [ebp+16]
				;registers changed: eax, ebx, ecx, edx, esi, edi (all restored after)
 000001DD				FillArray PROC
					;We currently know our converted value is on the stack saved at [ebp+16]:
 000001DD  60				pushad
 000001DE  8B 75 1C			mov esi, [ebp+28]
 000001E1  B8 00000004			mov eax, 4
 000001E6  8B 5D 28			mov ebx, [ebp+40]	
 000001E9  F7 23			mul DWORD PTR [ebx] 
 000001EB  03 F0			add esi, eax		;move to current index (add 4*index amount of BYTES into the array) then store
 000001ED				fill:
 000001ED  33 C0				xor eax, eax
 000001EF  8B 5D 10				mov ebx, [ebp+16]
 000001F2  8B 03				mov eax, [ebx]
 000001F4  89 06				mov [esi], eax
 000001F6  8B 06				mov eax, [esi]
 000001F8  8B 45 28				mov eax, [ebp+40]
 000001FB  80 00 01				add BYTE PTR [eax], 1 ;increment index
 000001FE  61				popad
 000001FF  C3				ret
 00000200				FillArray ENDP

				;Procedure to get user input ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				;receives:	@fail, @error, @numeric, @num_input, @prompt, @translate, @array counter, @lit, @index
				;returns: none
				;preconditions: user inputted value must be a valid integer
				;registers changed: eax, ebx, ecx, edx, esi, edi (all restored after)
 00000200				Get_Input PROC
 00000200  55				push ebp
 00000201  8B EC			mov ebp, esp

 00000203  B9 0000000A			mov ecx, 10
 00000208  8B 75 1C			mov esi, [ebp+28]
 0000020B				Ask:
 0000020B  E8 FFFFFEE1				call ReadVal
 00000210  E8 FFFFFFC8				call FillArray
 00000215  E2 F4				loop Ask
 00000217  5D				pop ebp
 00000218  C2 0024			ret 36
 0000021B				Get_Input ENDP


				;Procedure to convert numeric into string of digits and display ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				;receives: @array, @comma, @displArray, @temp_str, @count, @temp_byte, @ur_string
				;returns: none
				;preconditions: user inputted value must be a valid integer, the value must be on the stack at [ebp+16]
				;registers changed: eax, ebx, ecx, edx, esi, edi (all restored after)
 0000021B				WriteVal PROC
 0000021B  60					pushad
						DisplayString [ebp+32]
 0000021C  60		     1		pushad
 0000021D  8B 55 20	     1			mov edx, [ebp+32]	;will be an offset of a string
 00000220  E8 00000000 E     1			call WriteString
 00000225  61		     1		popad
 00000226  B9 0000000B				mov ecx, 11
 0000022B  FC					cld
 0000022C  8B 7D 14				mov edi, [ebp+20]			; we want to first clear our the temp string so we dont have leftover data
 0000022F  B0 00				mov al, 0

 00000231					clear_input:
 00000231  AA						stosb
 00000232  E2 FD					loop clear_input

 00000234  33 C0				xor eax, eax
 00000236  33 DB				xor ebx, ebx
 00000238  8B 06				mov eax, DWORD PTR [esi]
 0000023A  BB 0000000A				mov ebx, 10
 0000023F  8B 7D 14				mov edi, [ebp+20]			;temp_str for holding translated value
 00000242  FC					cld
 00000243					Backtrack:
 00000243  33 D2					xor edx, edx
 00000245  BB 0000000A					mov ebx, 10
 0000024A  F7 F3					div ebx			;eax/ebx -> remainder in edx
 0000024C  83 C2 30					add edx, 48		;convert to ASCII
 0000024F  8B D8					mov ebx, eax
 00000251  8B C2					mov eax, edx
 00000253  AA						stosb			;store into temp_str (going to be inputting backwards)
 00000254  8B C3					mov eax, ebx
 00000256  83 F8 00					cmp eax, 0
 00000259  75 E8					jne Backtrack

 0000025B					Reverse:			;temp_str now contains backwards version of the number
 0000025B  33 F6					xor esi, esi
 0000025D  33 C0					xor eax, eax
 0000025F  33 DB					xor ebx, ebx
 00000261  8B 75 14					mov esi, [ebp+20]
 00000264  8B 5D 18					mov ebx, [ebp+24]
 00000267  C7 03 00000000				mov DWORD PTR [ebx], 0
 0000026D						count_loop:						;track the number of number of BYTES in translated number (in temp_str)
 0000026D  8A 06						mov al, BYTE PTR [esi]
 0000026F  3C 00						cmp al, 0
 00000271  74 08						je finished
 00000273  83 C6 01						add esi, 1
 00000276  83 03 01						add DWORD PTR [ebx], 1
 00000279  EB F2						jmp count_loop
							
 0000027B						finished:	;we now know the count stored in [ebp+24]
 0000027B  8B 45 18						mov eax, [ebp+24]
 0000027E  8B 08						mov ecx, [eax]
 00000280  33 F6						xor esi, esi
 00000282  8B 75 14						mov esi, [ebp+20]
 00000285  8B 18						mov ebx, [eax]
 00000287  83 EB 01						sub ebx, 1
 0000028A  03 F3						add esi, ebx		;start the pointer to the string at the number of elements (minus 1) to account for addressing

 0000028C							display_reverse:
 0000028C  33 DB							xor ebx, ebx
 0000028E  33 C0							xor eax, eax
 00000290  8B 5D 1C							mov ebx, [ebp+28]
 00000293  8A 06							mov al, BYTE PTR [esi]
 00000295  89 03							mov [ebx], eax
									DisplayString ebx
 00000297  60		     1		pushad
 00000298  8B D3	     1			mov edx, ebx	;will be an offset of a string
 0000029A  E8 00000000 E     1			call WriteString
 0000029F  61		     1		popad
 000002A0  83 EE 01							sub esi, 1
 000002A3  E2 E7							loop display_reverse

 000002A5  8B 55 0C					mov edx, [ebp+12] ;comma
 000002A8  E8 00000000 E				call WriteString
 000002AD  61					popad
 000002AE  C3					ret
 000002AF				WriteVal ENDP

				;Procedure to display the user array ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				;receives: @array, @comma, @displArray, @temp_str, @count, @temp_byte, @ur_string
				;returns: none
				;preconditions: user inputted value must be a valid integer, the value must be on the stack at [ebp+16]
				;registers changed: eax, ebx, ecx, edx, esi, edi (all restored after)
 000002AF				Displayer PROC
 000002AF  55				push ebp
 000002B0  8B EC			mov ebp, esp
 000002B2  60				pushad
 000002B3  E8 00000000 E			call CRLF
 000002B8  B9 0000000A				mov ecx, 10
 000002BD  8B 75 08				mov esi, [ebp+8]
 000002C0					display:
 000002C0  E8 FFFFFF56					call WriteVal
 000002C5  83 C6 04					add esi, 4			;increment array
 000002C8  E2 F6					loop display
 000002CA  E8 00000000 E			call CRLF
 000002CF  E8 00000000 E			call CRLF
 000002D4  61				popad
 000002D5  5D				pop ebp
 000002D6  C2 001C			ret 28
 000002D9				Displayer ENDP

				;Procedure to display the sum of user array ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				;receives: @array, @sum, @sum_text
				;returns: none
				;preconditions: array must contain all valid integers (10), @sum must be pushed to the stack
				;registers changed: eax, ebx, esi, edx (all restored after)
 000002D9				DisplaySum PROC
 000002D9  60				pushad
 000002DA  8B 75 0C			mov esi, [ebp+12]	;array
 000002DD  B9 0000000A			mov ecx, 10
						;sum

 000002E2				Summer:					;Sum up all of the elements in the array (for loop)
 000002E2  8B 1E				mov ebx, [esi]
 000002E4  8B 45 08				mov eax, [ebp+8]
 000002E7  01 18				add [eax], ebx
 000002E9  83 C6 04				add esi, 4
 000002EC  E2 F4				loop Summer

					DisplayString [ebp+16]	;Displays the sum value	
 000002EE  60		     1		pushad
 000002EF  8B 55 10	     1			mov edx, [ebp+16]	;will be an offset of a string
 000002F2  E8 00000000 E     1			call WriteString
 000002F7  61		     1		popad
 000002F8  8B 5D 08			mov ebx, [ebp+8]
 000002FB  8B 03			mov eax, [ebx]
 000002FD  E8 00000000 E		call WriteDec
 00000302  E8 00000000 E		call CRLF

 00000307  61				popad
 00000308  C3				ret
 00000309				DisplaySum ENDP

				;Procedure to display the avg of user array ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				;receives: @array, @sum, @sum_text, @avg_text
				;returns: none
				;preconditions: array must contain all valid integers (10)
				;registers changed: eax, ebx, esi, edx (all restored after)
 00000309				DisplayAvg PROC
 00000309  55				push ebp
 0000030A  8B EC			mov ebp, esp
 0000030C  60				pushad

 0000030D  E8 FFFFFFC7			call DisplaySum			;Display the sum
					DisplayString [ebp+20]
 00000312  60		     1		pushad
 00000313  8B 55 14	     1			mov edx, [ebp+20]	;will be an offset of a string
 00000316  E8 00000000 E     1			call WriteString
 0000031B  61		     1		popad
 0000031C  33 D2			xor edx, edx
 0000031E  8B 5D 08			mov ebx, [ebp+8]
 00000321  8B 03			mov eax, [ebx]			;Divide by 10 (num_elements) to get average
 00000323  BB 0000000A			mov ebx, 10
 00000328  F7 F3			div ebx
 0000032A  E8 00000000 E		call WriteDec			;Display the average

 0000032F  E8 00000000 E		call CRLF
 00000334  E8 00000000 E		call CRLF
 00000339  61				popad
 0000033A  5D				pop ebp
 0000033B  C2 0010			ret 16
 0000033E				DisplayAvg ENDP

				;Procedure to display farewell message to user ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				;receives: @byebye
				;returns: none
				;preconditions: byebye must be valid string
				;registers changed: edx (all restored after)
 0000033E				Farewell PROC
 0000033E  55				push ebp
 0000033F  8B EC			mov ebp, esp
 00000341  60				pushad
 00000342  E8 00000000 E		call CRLF
					DisplayString [ebp+8]	;Say farewell to user
 00000347  60		     1		pushad
 00000348  8B 55 08	     1			mov edx, [ebp+8]	;will be an offset of a string
 0000034B  E8 00000000 E     1			call WriteString
 00000350  61		     1		popad
 00000351  E8 00000000 E		call CRLF
 00000356  61				popad
 00000357  5D				pop ebp
 00000358  C2 0004			ret 4
 0000035B				Farewell ENDP

				;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				END main
Microsoft (R) Macro Assembler Version 14.12.25834.0	    03/17/18 14:38:23
-Programming Assignment 6    (ProjectSixA.asm		     Symbols 2 - 1




Macros:

                N a m e                 Type

DisplayString  . . . . . . . . .	Proc
GetString  . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000358 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000035B Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DisplayAvg . . . . . . . . . . .	P Near	 00000309 _TEXT	Length= 00000035 Public STDCALL
DisplaySum . . . . . . . . . . .	P Near	 000002D9 _TEXT	Length= 00000030 Public STDCALL
  Summer . . . . . . . . . . . .	L Near	 000002E2 _TEXT	
Displayer  . . . . . . . . . . .	P Near	 000002AF _TEXT	Length= 0000002A Public STDCALL
  display  . . . . . . . . . . .	L Near	 000002C0 _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Farewell . . . . . . . . . . . .	P Near	 0000033E _TEXT	Length= 0000001D Public STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FillArray  . . . . . . . . . . .	P Near	 000001DD _TEXT	Length= 00000023 Public STDCALL
  fill . . . . . . . . . . . . .	L Near	 000001ED _TEXT	
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Get_Input  . . . . . . . . . . .	P Near	 00000200 _TEXT	Length= 0000001B Public STDCALL
  Ask  . . . . . . . . . . . . .	L Near	 0000020B _TEXT	
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Introduction . . . . . . . . . .	P Near	 000000A7 _TEXT	Length= 0000004A Public STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000000F1 _TEXT	Length= 000000EC Public STDCALL
  Ask  . . . . . . . . . . . . .	L Near	 000000F2 _TEXT	
  clear_input  . . . . . . . . .	L Near	 00000110 _TEXT	
  clear_output . . . . . . . . .	L Near	 00000121 _TEXT	
  Check_zero . . . . . . . . . .	L Near	 00000146 _TEXT	
  Bypass . . . . . . . . . . . .	L Near	 00000152 _TEXT	
  Not_Zero . . . . . . . . . . .	L Near	 0000015D _TEXT	
  Validate_length  . . . . . . .	L Near	 0000016D _TEXT	
  INVALID  . . . . . . . . . . .	L Near	 0000017A _TEXT	
  next_one . . . . . . . . . . .	L Near	 0000018D _TEXT	
  After  . . . . . . . . . . . .	L Near	 00000198 _TEXT	
  morph  . . . . . . . . . . . .	L Near	 0000019E _TEXT	
  Size_check . . . . . . . . . .	L Near	 000001D1 _TEXT	
  Ender  . . . . . . . . . . . .	L Near	 000001DB _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 0000021B _TEXT	Length= 00000094 Public STDCALL
  clear_input  . . . . . . . . .	L Near	 00000231 _TEXT	
  Backtrack  . . . . . . . . . .	L Near	 00000243 _TEXT	
  Reverse  . . . . . . . . . . .	L Near	 0000025B _TEXT	
  count_loop . . . . . . . . . .	L Near	 0000026D _TEXT	
  finished . . . . . . . . . . .	L Near	 0000027B _TEXT	
  display_reverse  . . . . . . .	L Near	 0000028C _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000A7 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LEN  . . . . . . . . . . . . . .	Number	 00000064h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
QLEN . . . . . . . . . . . . . .	Number	 00000050h   
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
array  . . . . . . . . . . . . .	DWord	 0000027C _DATA	
avg_text . . . . . . . . . . . .	Byte	 000002F7 _DATA	
avg  . . . . . . . . . . . . . .	DWord	 000002CB _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
byebye . . . . . . . . . . . . .	Byte	 00000342 _DATA	
comma  . . . . . . . . . . . . .	Byte	 0000020D _DATA	
counter  . . . . . . . . . . . .	DWord	 000002B3 _DATA	
count  . . . . . . . . . . . . .	DWord	 0000032F _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
displArray . . . . . . . . . . .	Byte	 000002A4 _DATA	
error  . . . . . . . . . . . . .	Byte	 000001D6 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fail . . . . . . . . . . . . . .	DWord	 00000278 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
hello1 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
hello2 . . . . . . . . . . . . .	Byte	 0000003F _DATA	
hello3 . . . . . . . . . . . . .	Byte	 0000005A _DATA	
hello4 . . . . . . . . . . . . .	Byte	 00000089 _DATA	
hello5 . . . . . . . . . . . . .	Byte	 000000D1 _DATA	
hello6 . . . . . . . . . . . . .	Byte	 0000011B _DATA	
index  . . . . . . . . . . . . .	DWord	 000002C3 _DATA	
input_ptr  . . . . . . . . . . .	DWord	 000001B6 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
lit  . . . . . . . . . . . . . .	DWord	 000002BF _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
num_input  . . . . . . . . . . .	Byte	 00000152 _DATA	
numeric  . . . . . . . . . . . .	Byte	 00000214 _DATA	
prompt_ptr . . . . . . . . . . .	DWord	 00000210 _DATA	
prompt . . . . . . . . . . . . .	Byte	 000001BA _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sum_text . . . . . . . . . . . .	Byte	 000002CF _DATA	
sum  . . . . . . . . . . . . . .	DWord	 000002C7 _DATA	
temp_byte  . . . . . . . . . . .	Byte	 00000333 _DATA	
temp_str . . . . . . . . . . . .	Byte	 00000323 _DATA	
translate  . . . . . . . . . . .	QWord	 000002B7 _DATA	
ur_string  . . . . . . . . . . .	Byte	 00000334 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
